import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
import difflib  # Import difflib for finding close matches

# Load your movie data (replace 'your_movie_data.csv' with your actual file)
# Make sure the path to your file is correct.
# Load your movie data, handling potential errors
movies_data = pd.read_csv('movies.csv')

# Select relevant features
selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director', 'popularity']

# Fill missing values with empty strings
for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')

# Attempt to convert 'popularity' to numeric, handling errors
# Invalid parsing will be set as NaN
movies_data['popularity'] = pd.to_numeric(movies_data['popularity'], errors='coerce')

# Drop rows with NaN values in 'popularity' after conversion
movies_data = movies_data.dropna(subset=['popularity'])

# Normalize 'popularity'
scaler = MinMaxScaler()
movies_data['popularity_scaled'] = scaler.fit_transform(movies_data['popularity'].values.reshape(-1, 1))

# Combine features (including normalized popularity)
combined_features = movies_data[['genres', 'keywords', 'tagline', 'cast', 'director', 'popularity_scaled']].apply(lambda x: ' '.join(x.astype(str)), axis=1)

# Create TF-IDF vectors (for text features)
vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)

# Calculate cosine similarity between movies
similarity = cosine_similarity(feature_vectors)

# Function to recommend movies based on a given movie title
def recommend_movies(movie_name):
    list_of_all_titles = movies_data['title'].tolist()
    find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

    if find_close_match:
        close_match = find_close_match[0]
        index = movies_data[movies_data['title'] == close_match].index[0]

        similarity_scores = list(enumerate(similarity[index]))
        sorted_movies = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

        print('Recommendations for:', close_match)  # Print the close match
        for i in range(1, 11):  # Start from 1 to skip the movie itself
            movie_index = sorted_movies[i][0]
            print(movies_data['title'][movie_index])
    else:
        print("No close matches found for:", movie_name)

# Get favorite movie from user input
favorite_movie = input('Enter your favorite movie name: ')
recommend_movies(favorite_movie)